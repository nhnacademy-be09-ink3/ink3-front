name: CI For Dev

on:
  pull_request:
    branches:
      - dev

env:
  RABBITMQ_HOST: ${{ secrets.RABBITMQ_HOST }}
  RABBITMQ_PORT: ${{ secrets.RABBITMQ_PORT }}
  RABBITMQ_USERNAME: ${{ secrets.RABBITMQ_USERNAME }}
  RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}

jobs:
  build:
    name: Build JAR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract version from POM
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 추출된 버전 확인
        run: echo "${{ steps.extract_version.outputs.version }} 입니다."

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build all modules with Maven
        run: mvn clean install -DskipTests=true -B

  sonar-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: SonarQube Scan
        run: |
          mvn verify -Dspring.profiles.active=test sonar:sonar \
            -Dsonar.projectKey=ink3_front_server \
            -Dsonar.projectName='ink3_front_server' \
            -Dsonar.host.url=http://s4.java21.net:9000 \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      - name: Check coverage threshold
        run: |
          LINE_COVERAGE=$(grep -A1 "<counter type=\"LINE\"" target/site/jacoco/jacoco.xml | grep -oP 'covered="\K[0-9]+' | paste -sd+ - | bc)
          LINE_MISSED=$(grep -A1 "<counter type=\"LINE\"" target/site/jacoco/jacoco.xml | grep -oP 'missed="\K[0-9]+' | paste -sd+ - | bc)
          TOTAL=$((LINE_COVERAGE + LINE_MISSED))
          PERCENT=$((LINE_COVERAGE * 100 / TOTAL))
          echo "Coverage: $PERCENT%"
  #          if [ "$PERCENT" -lt 60 ]; then
  #            echo "Coverage is below 60%! Failing build."
  #            exit 1
  #          fi

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Extract version from POM
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 추출된 버전 확인
        run: echo "${{ steps.extract_version.outputs.version }} 입니다."

      - name: Package application (skip tests)
        run: |
          mvn package -DskipTests=true -B
          ls -R .

      - name: Show pwd
        run: pwd

      - name: Show ls
        run: ls

      - name: Run application in background
        run: |
          nohup java -jar /home/runner/work/ink3-front/ink3-front/target/front-${{ steps.extract_version.outputs.version }}.jar --server.port=10254 --spring.profiles.active=test --spring.rabbitmq.host=${{ secrets.RABBITMQ_HOST }} --spring.rabbitmq.port=${{ secrets.RABBITMQ_PORT }} --spring.rabbitmq.username=${{ secrets.RABBITMQ_USERNAME }} --spring.rabbitmq.password=${{ secrets.RABBITMQ_PASSWORD }} > app.log 2>&1 &
          echo $! > app.pid

      - name: Wait for application to start
        run: sleep 30

      - name: Check health endpoint
        run: curl --fail http://localhost:10254/actuator/health

      - name: Stop application
        run: kill $(cat app.pid)

      - name: Run unit tests
        run: mvn test -B -Dspring.profiles.active=test

      - name: Print app log if health check fails
        if: failure()
        run: cat app.log
